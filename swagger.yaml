openapi: 3.0.3
info:
  title: Bellefull Food Ordering App
  description: The Belleful Food Ordering App API provides a seamless experience for customers to order their favorite meals. This API offers endpoints for managing user accounts, browsing available meals, placing orders, and tracking delivery status.
  contact:
    email: contact@bellefull.app
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://api.bellefull.app/v1
    description: Production server
  - url: https://staging.bellefull.app/v1
    description: Staging server
tags:
  - name: Onboarding
    description: Endpoints for user registration and authentication
  - name: Customers
    description: Endpoints for managing customer accounts
  - name: Vendor
    description: Endpoints for managing vendor accounts
  - name: Meals
    description: Endpoints for browsing available meals
  - name: Cart
    description: Endpoints for managing shopping carts
  - name: Orders
    description: Endpoints for placing and tracking orders
  - name: Payments
    description: Endpoints for processing payments
  - name: Admin
    description: Endpoints for managing admin accounts
paths:
  /auth/signup:
    post:
      tags:
        - Onboarding
      summary: Register a new user
      description: Register a new user account with the Bellefull Food Ordering App
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User registration successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
        "409":
          description: User already exists
  /auth/login:
    post:
      tags:
        - Onboarding
      summary: Authenticate a user
      description: Authenticate a user with the Bellefull Food Ordering App
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
      responses:
        "200":
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
        "401":
          description: Unauthorized
  /auth/recover-password:
    post:
      tags:
        - Onboarding
      summary: Recover user password
      description: Send a password recovery email to the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Email"
      responses:
        "200":
          description: Password recovery email sent
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
        "404":
          description: User not found
  /customers:
    get:
      tags:
        - Customers
      summary: Get all customers
      description: Retrieve a list of all customers registered with the Bellefull Food Ordering App

      responses:
        "200":
          description: List of customers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items: 
                $ref: "#/components/schemas/User"
    post:
      tags:
        - Customers
      summary: Create a new customer
      description: Register a new customer account with the Bellefull Food Ordering App
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Customer registration successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
        "409":
          description: Customer already exists

  /customers/{customerId}:
    get:
      tags:
        - Customers
      summary: Get customer details
      description: Retrieve details of a specific customer
      parameters:
        - name: customerId
          in: path
          required: true
          description: ID of the customer to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Customer details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Customer not found
    put:
      tags:
        - Customers
      summary: Update customer details
      description: Update details of a specific customer
      parameters:
        - name: customerId
          in: path
          required: true
          description: ID of the customer to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Customer details updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
        "404":
          description: Customer not found
    delete:
      tags:
        - Customers
      summary: Delete a customer
      description: Delete a specific customer account
      parameters:
        - name: customerId
          in: path
          required: true
          description: ID of the customer to delete
          schema:
            type: integer
      responses:
        "204":
          description: Customer deleted successfully
        "404":
          description: Customer not found
  /vendors:
    get:
      tags:
        - Vendor
      summary: Get all vendors
      description: Retrieve a list of all vendors registered with the Bellefull Food Ordering App
      responses:
        "200":
          description: List of vendors retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - Vendor
      summary: Create a new vendor
      description: Register a new vendor account with the Bellefull Food Ordering App
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Vendor registration successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
        "409":
          description: Vendor already exists
  /vendors/{vendorId}:
    get:
      tags:
        - Vendor
      summary: Get vendor details
      description: Retrieve details of a specific vendor
      parameters:
        - name: vendorId
          in: path
          required: true
          description: ID of the vendor to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Vendor details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Vendor not found
    put:
      tags:
        - Vendor
      summary: Update vendor details
      description: Update details of a specific vendor
      parameters:
        - name: vendorId
          in: path
          required: true
          description: ID of the vendor to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Vendor details updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
        "404":
          description: Vendor not found
    delete:
      tags:
        - Vendor
      summary: Delete a vendor
      description: Delete a specific vendor account
      parameters:
        - name: vendorId
          in: path
          required: true
          description: ID of the vendor to delete
          schema:
            type: integer
      responses:
        "204":
          description: Vendor deleted successfully
        "404":
          description: Vendor not found
  /meals:
    get:
      tags:
        - Meals
      summary: Get all meals
      description: Retrieve a list of all available meals from vendors
      responses:
        "200":
          description: List of meals retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Meal"
    post:
      tags:
        - Meals
      summary: Add a new meal
      description: Add a new meal to the list of available meals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meal"
      responses:
        "201":
          description: Meal added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meal"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
  /meals/{mealId}:
    get:
      tags:
        - Meals
      summary: Get meal details
      description: Retrieve details of a specific meal
      parameters:
        - name: mealId
          in: path
          required: true
          description: ID of the meal to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Meal details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meal"
        "404":
          description: Meal not found
    put:
      tags:
        - Meals
      summary: Update meal details
      description: Update details of a specific meal
      parameters:
        - name: mealId
          in: path
          required: true
          description: ID of the meal to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meal"
      responses:
        "200":
          description: Meal details updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meal"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
        "404":
          description: Meal not found
    delete:
      tags:
        - Meals
      summary: Delete a meal
      description: Delete a specific meal from the list of available meals
      parameters:
        - name: mealId
          in: path
          required: true
          description: ID of the meal to delete
          schema:
            type: integer
      responses:
        "204":
          description: Meal deleted successfully
        "404":
          description: Meal not found
  /cart:
    get:
      tags:
        - Cart
      summary: Get shopping cart
      description: Retrieve the current shopping cart of the authenticated user
      responses:
        "200":
          description: Shopping cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
    post:
      tags:
        - Cart
      summary: Add item to cart
      description: Add a new item to the shopping cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "201":
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
  /cart/{itemId}:
    put:
      tags:
        - Cart
      summary: Update cart item
      description: Update details of a specific item in the shopping cart
      parameters:
        - name: itemId
          in: path
          required: true
          description: ID of the item in the cart to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"

        "404":
          description: Item not found in cart
    delete:
      tags:
        - Cart
      summary: Remove item from cart
      description: Remove a specific item from the shopping cart
      parameters:
        - name: itemId
          in: path
          required: true
          description: ID of the item in the cart to remove
          schema:
            type: integer
      responses:
        "204":
          description: Item removed from cart successfully
        "404":
          description: Item not found in cart
  /orders:
    get:
      tags:
        - Orders
      summary: Get all orders
      description: Retrieve a list of all orders placed by the authenticated user
      responses:
        "200":
          description: List of orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      tags:
        - Orders
      summary: Place a new order
      description: Place a new order with the selected items in the shopping cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "201":
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get order details
      description: Retrieve details of a specific order
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
    put:
      tags:
        - Orders
      summary: Update order status
      description: Update the status of a specific order
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
        "404":
          description: Order not found
    delete:
      tags:
        - Orders
      summary: Cancel an order
      description: Cancel a specific order
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order to cancel
          schema:
            type: integer
      responses:
        "204":
          description: Order canceled successfully
        "404":
          description: Order not found
  /payments:
    post:
      tags:
        - Payments
      summary: Process payment
      description: Process payment for a specific order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment"
      responses:
        "200":
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Receipt"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      description: Retrieve a list of all users registered with the Bellefull Food Ordering App
      responses:
        "200":
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /admin/users/{userId}:
    get:
      tags:
        - Admin
      summary: Get user details
      description: Retrieve details of a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    put:
      tags:
        - Admin
      summary: Update user details
      description: Update details of a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User details updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"
        "404":
          description: User not found
    delete:
      tags:
        - Admin
      summary: Delete a user
      description: Delete a specific user account
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: integer
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        full_name:
          type: string
        bussiness_name:
          type: string
        description:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string
          enum:
            - customer
            - vendor
            - admin
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - full_name
        - email
        - role
        - password
    Token:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    Credentials:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    Meal:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        vendor_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - description
        - price
        - vendor_id
    Cart:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - user_id
    CartItem:
      type: object
      properties:
        id:
          type: string
        meal_id:
          type: string
        quantity:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - meal_id
        - quantity
    Order:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
        status:
          type: string
          enum:
            - pending
            - confirmed
            - delivered
            - canceled
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - user_id
        - items
        - status
    Payment:
      type: object
      properties:
        id:
          type: string
        order_id:
          type: string
        amount:
          type: number
          format: float
        payment_type:
          type: string
          enum:
            - card
            - transfer
      required:
        - order_id
        - amount
        - payment_type
    Receipt:
      type: object
      properties:
        id:
          type: string
        order_id:
          type: string
        amount:
          type: number
          format: float
        payment_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - order_id
        - amount
        - payment_date
    InvalidRequest:
      type: object
      properties:
        status:
          type: boolean
          enum:
            - false
        message:
          type: string
          enum:
            - Invalid request body
            - User already exists
            - User not found
            - Item not found in cart
            - Meal not found
            - Order not found
            - Vendor already exists
            - Vendor not found
            - Customer already exists
            - Customer not found
            - Unauthorized
            - Invalid credentials
            - Invalid payment details
            - Invalid card number
            - Invalid expiry date
            - Invalid CVV
            - Invalid email address
            - Invalid phone number
            - Invalid address
            - Invalid name
            - Invalid price
